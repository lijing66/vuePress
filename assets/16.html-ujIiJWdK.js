import{_ as n,o as s,c as a,b as p}from"./app-du5sw6ua.js";const t={},e=p(`<h1 id="二维螺旋数组" tabindex="-1"><a class="header-anchor" href="#二维螺旋数组" aria-hidden="true">#</a> 二维螺旋数组</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> 得到如下的数组
<span class="token doc-comment comment">/**
 * [1,  2,  3,  4]
 * [10, 11, 12, 5]
 * [9,  8,  7,  6]
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考代码1" tabindex="-1"><a class="header-anchor" href="#参考代码1" aria-hidden="true">#</a> 参考代码1</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">rows<span class="token punctuation">,</span> cols</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建一个空的二维数组 </span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Array</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> startRow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> startCol <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> endRow <span class="token operator">=</span> rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> endCol <span class="token operator">=</span> cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>startRow <span class="token operator">&lt;=</span> endRow <span class="token operator">&amp;&amp;</span> startCol <span class="token operator">&lt;=</span> endCol<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 上方行 </span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startCol<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> endCol<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          result<span class="token punctuation">[</span>startRow<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> counter<span class="token punctuation">;</span>
          counter<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      startRow<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token comment">// 右侧列 </span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startRow<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> endRow<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>endCol<span class="token punctuation">]</span> <span class="token operator">=</span> counter<span class="token punctuation">;</span>
          counter<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> 
      
      endCol<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token comment">// 底部行 </span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> endCol<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> startCol<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          result<span class="token punctuation">[</span>endRow<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> counter<span class="token punctuation">;</span>
          counter<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      endRow<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token comment">// 左侧列 </span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> endRow<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> startRow<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>startCol<span class="token punctuation">]</span> <span class="token operator">=</span> counter<span class="token punctuation">;</span> counter<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> 
      startCol<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考代码2" tabindex="-1"><a class="header-anchor" href="#参考代码2" aria-hidden="true">#</a> 参考代码2</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * [1,  2,  3,  4]
 * [10, 11, 12, 5]
 * [9,  8,  7,  6]
 */</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>col<span class="token operator">=</span><span class="token number">4</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>row<span class="token operator">*</span>col<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>i</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> resultArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> resultArr<span class="token punctuation">)</span>
    <span class="token comment">// 起点</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    resultArr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> val
    <span class="token keyword">var</span> dirInd <span class="token operator">=</span> <span class="token number">0</span>
    
    <span class="token keyword">while</span><span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> row<span class="token operator">*</span>col<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">findNextPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> dirInd<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> resultArr<span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>res<span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> res<span class="token punctuation">.</span>x
            y <span class="token operator">=</span> res<span class="token punctuation">.</span>y
            dirInd <span class="token operator">=</span> res<span class="token punctuation">.</span>dirInd 
            resultArr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>val
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> resultArr<span class="token punctuation">)</span>

<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">findNextPoint</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span> dirInd<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> resultArr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> cur <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">var</span> direction <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 右</span>
        <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 下</span>
        <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 左</span>
        <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 上</span>
    <span class="token punctuation">]</span>
    <span class="token keyword">var</span> direction <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 下</span>
        <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 右</span>
        <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 上</span>
        <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 左</span>
    <span class="token punctuation">]</span>

    <span class="token keyword">let</span> newX <span class="token operator">=</span> <span class="token number">0</span> 
    <span class="token keyword">let</span> newY <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        newX <span class="token operator">=</span> direction<span class="token punctuation">[</span>dirInd<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> x 
        newY <span class="token operator">=</span> direction<span class="token punctuation">[</span>dirInd<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> y
        <span class="token keyword">if</span><span class="token punctuation">(</span>newX <span class="token operator">&lt;</span> col <span class="token operator">&amp;&amp;</span> newY <span class="token operator">&lt;</span> row <span class="token operator">&amp;&amp;</span> newX<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newY<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">undefined</span> <span class="token operator">===</span> resultArr<span class="token punctuation">[</span>newY<span class="token punctuation">]</span><span class="token punctuation">[</span>newX<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            dirInd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span>dirInd<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">4</span>
            cur<span class="token operator">++</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">&lt;=</span><span class="token number">4</span> <span class="token punctuation">)</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">x</span><span class="token operator">:</span>newX<span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span>newY<span class="token punctuation">,</span> dirInd
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","16.html.vue"]]);export{r as default};
